{"version":3,"file":"grpahql-svelte.js","sources":["../node_modules/unfetch/polyfill/polyfill.mjs","../node_modules/unfetch/src/index.mjs","../node_modules/extract-files/lib/ReactNativeFile.mjs","../src/graphqlFetchOptions.js","../node_modules/extract-files/lib/extractFiles.mjs","../node_modules/fnv1a/index.js","../src/hashObject.js","../src/GraphQL.js","../node_modules/mitt/dist/mitt.es.js","../src/reportCacheErrors.js"],"sourcesContent":["import unfetch from '../src/index.mjs';\nif (!self.fetch) self.fetch = unfetch;\n","export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(JSON.parse(request.responseText)),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n","export var ReactNativeFile = function ReactNativeFile(_ref) {\n  var uri = _ref.uri,\n    name = _ref.name,\n    type = _ref.type\n  this.uri = uri\n  this.name = name\n  this.type = type\n}\n","import { extractFiles } from 'extract-files'\n\n/**\n * Gets default [`fetch` options]{@link GraphQLFetchOptions} for a\n * [GraphQL operation]{@link GraphQLOperation}.\n * @param {GraphQLOperation} operation GraphQL operation.\n * @returns {GraphQLFetchOptions} [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API) options.\n * @ignore\n */\nexport function graphqlFetchOptions(operation) {\n  const fetchOptions = {\n    url: '/graphql',\n    method: 'POST',\n    headers: { Accept: 'application/json' }\n  }\n\n  const { clone, files } = extractFiles(operation)\n  const operationJSON = JSON.stringify(clone)\n\n  if (files.size) {\n    // See the GraphQL multipart request spec:\n    // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n    const form = new FormData()\n\n    form.append('operations', operationJSON)\n\n    const map = {}\n    let i = 0\n    files.forEach(paths => {\n      map[++i] = paths\n    })\n    form.append('map', JSON.stringify(map))\n\n    i = 0\n    files.forEach((paths, file) => {\n      form.append(`${++i}`, file, file.name)\n    })\n\n    fetchOptions.body = form\n  } else {\n    fetchOptions.headers['Content-Type'] = 'application/json'\n    fetchOptions.body = operationJSON\n  }\n\n  return fetchOptions\n}","import { ReactNativeFile } from './ReactNativeFile'\nexport function extractFiles(value, path) {\n  if (path === void 0) {\n    path = ''\n  }\n\n  var clone\n  var files = new Map()\n\n  function addFile(paths, file) {\n    var storedPaths = files.get(file)\n    if (storedPaths) storedPaths.push.apply(storedPaths, paths)\n    else files.set(file, paths)\n  }\n\n  if (\n    (typeof File !== 'undefined' && value instanceof File) ||\n    (typeof Blob !== 'undefined' && value instanceof Blob) ||\n    value instanceof ReactNativeFile\n  ) {\n    clone = null\n    addFile([path], value)\n  } else {\n    var prefix = path ? path + '.' : ''\n    if (typeof FileList !== 'undefined' && value instanceof FileList)\n      clone = Array.prototype.map.call(value, function(file, i) {\n        addFile(['' + prefix + i], file)\n        return null\n      })\n    else if (Array.isArray(value))\n      clone = value.map(function(child, i) {\n        var result = extractFiles(child, '' + prefix + i)\n        result.files.forEach(addFile)\n        return result.clone\n      })\n    else if (value && value.constructor === Object) {\n      clone = {}\n\n      for (var i in value) {\n        var result = extractFiles(value[i], '' + prefix + i)\n        result.files.forEach(addFile)\n        clone[i] = result.clone\n      }\n    } else clone = value\n  }\n\n  return {\n    clone: clone,\n    files: files\n  }\n}\n","/**\n * Created by schwarzkopfb on 15/11/17.\n */\n\n/**\n * FNV-1a hash generation init value.\n * It's exposed, because this allows user to override it.\n *\n * @type {number}\n */\nhash.BASE = 0x811c9dc5\n\n/**\n * Generates 32 bit FNV-1a hash from the given string.\n * As explained here: http://isthe.com/chongo/tech/comp/fnv/\n *\n * @param s {string} String to generate hash from.\n * @returns {number} The result integer hash.\n */\nfunction hash(s) {\n    var h = hash.BASE\n\n    for (var i = 0, l = s.length; i < l; i++) {\n        h ^= s.charCodeAt(i)\n        h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24)\n    }\n\n    return h >>> 0\n}\n\nmodule.exports = hash\n","import fnv1a from 'fnv1a'\n\n/**\n * `JSON.stringify()` replacer that converts\n * [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData) instances\n * into a signature string.\n * @param {string} key Property name.\n * @param {*} value Property value.\n * @returns {*} Original value or replaced value if it was a `FormData` instance.\n * @ignore\n */\nfunction hashObjectReplacer(key, value) {\n  // Retrieve the original value, and not the possible .toJSON() version. When a\n  // value has a .toJSON() method, JSON.stringify provides the replacer\n  // function with output of that instead of the original value. FormData\n  // instances in browsers do not have a .toJSON() method, but some polyfill\n  // implementations might.\n  // See: https://github.com/octet-stream/form-data/issues/2\n  const originalValue = this[key]\n\n  if (typeof FormData !== 'undefined' && originalValue instanceof FormData) {\n    // Value is a FormData instance. The idea is to return a string representing\n    // the unique signature of the form, to be hashed with the surrounding JSON\n    // string. Note that FormData forms can have multiple fields with the same\n    // name and that the order of form fields also determines the signature.\n\n    let signature = ''\n\n    const fields = originalValue.entries()\n\n    // Iterate manually using next() to avoid bulky for … of syntax\n    // transpilation.\n    let field = fields.next()\n    while (!field.done) {\n      const [name, value] = field.value\n\n      // If the value is a File or Blob instance, it should cast to a string\n      // like `[object File]`. It would be good if there was a way to signature\n      // File or Blob instances.\n      signature += `${name}${value}`\n\n      field = fields.next()\n    }\n\n    return signature\n  }\n\n  // Let JSON.stringify() stringify the value as normal.\n  return value\n}\n\n/**\n * Hashes an object.\n * @param {object} object A JSON serializable object that may contain [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData) instances.\n * @returns {string} A hash.\n * @ignore\n */\nexport const hashObject = object =>\n  fnv1a(JSON.stringify(object, hashObjectReplacer)).toString(36)","import 'unfetch/polyfill'\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport mitt from 'mitt';\nimport { graphqlFetchOptions } from './graphqlFetchOptions';\nimport { hashObject } from './hashObject';\n/**\n * A lightweight GraphQL client that caches queries and mutations.\n * @kind class\n * @name GraphQL\n * @param {object} [options={}] Options.\n * @param {GraphQLCache} [options.cache={}] Cache to import; usually from a server side render.\n * @see [`reportCacheErrors`]{@link reportCacheErrors} to setup error reporting.\n * @example <caption>Construct a GraphQL client.</caption>\n * ```js\n * import { GraphQL } from 'graphql-react'\n *\n * const graphql = new GraphQL()\n * ```\n */\n\nexport class GraphQL {\n  // eslint-disable-next-line require-jsdoc\n  constructor({\n    cache = {}\n  } = {}) {\n    _defineProperty(this, \"reload\", exceptCacheKey => {\n      this.emit('reload', {\n        exceptCacheKey\n      });\n    });\n\n    _defineProperty(this, \"reset\", exceptCacheKey => {\n      let cacheKeys = Object.keys(this.cache);\n      if (exceptCacheKey) cacheKeys = cacheKeys.filter(hash => hash !== exceptCacheKey);\n      cacheKeys.forEach(cacheKey => delete this.cache[cacheKey]); // Emit cache updates after the entire cache has been updated, so logic in\n      // listeners can assume cache for all queries is fresh and stable.\n\n      this.emit('reset', {\n        exceptCacheKey\n      });\n    });\n\n    _defineProperty(this, \"fetch\", ({\n      url,\n      ...options\n    }, cacheKey) => {\n      let fetchResponse;\n      const fetcher = typeof fetch === 'function' ? fetch : () => Promise.reject(new Error('Global fetch API or polyfill unavailable.'));\n      const cacheValue = {};\n      const cacheValuePromise = fetcher(url, options).then(response => {\n        fetchResponse = response;\n        if (!response.ok) cacheValue.httpError = {\n          status: response.status,\n          statusText: response.statusText\n        };\n        return response.json().then(({\n          errors,\n          data\n        }) => {\n          // JSON parse ok.\n          if (!errors && !data) cacheValue.parseError = 'Malformed payload.';\n          if (errors){\n            throw new Error(JSON.stringify(errors))\n            cacheValue.graphQLErrors = errors;\n          } \n          if (data) cacheValue.data = data;\n\n        }, ({\n          message\n        }) => {\n          // JSON parse error.\n          cacheValue.parseError = message;\n        });\n      }, ({\n        message\n      }) => {\n        cacheValue.fetchError = message;\n      }).then(() => {\n        // Cache the operation.\n        this.cache[cacheKey] = cacheValue; // Clear the loaded operation.\n\n        delete this.operations[cacheKey];\n        this.emit('cache', {\n          cacheKey,\n          cacheValue,\n          // May be undefined if there was a fetch error.\n          response: fetchResponse\n        });\n        return cacheValue;\n      });\n      this.operations[cacheKey] = cacheValuePromise;\n      this.emit('fetch', {\n        cacheKey,\n        cacheValuePromise\n      });\n      return cacheValuePromise;\n    });\n\n    _defineProperty(this, \"operate\", ({\n      operation,\n      fetchOptionsOverride,\n      reloadOnLoad,\n      resetOnLoad\n    }) => {\n      if (reloadOnLoad && resetOnLoad) throw new Error('operate() options “reloadOnLoad” and “resetOnLoad” can’t both be true.');\n      const fetchOptions = graphqlFetchOptions(operation);\n      if (fetchOptionsOverride) fetchOptionsOverride(fetchOptions);\n      const cacheKey = hashObject(fetchOptions);\n      const cacheValuePromise = // Use an identical existing request or…\n      this.operations[cacheKey] || // …make a fresh request.\n      this.fetch(fetchOptions, cacheKey); // Potential edge-case issue: Multiple identical queries with resetOnLoad\n      // enabled will cause excessive resets.\n\n      cacheValuePromise.then(() => {\n        if (reloadOnLoad) this.reload(cacheKey);else if (resetOnLoad) this.reset(cacheKey);\n      });\n      return {\n        cacheKey,\n        cacheValue: this.cache[cacheKey],\n        cacheValuePromise\n      };\n    });\n\n    const {\n      on,\n      off,\n      emit\n    } = mitt();\n    /**\n     * Adds an event listener.\n     * @kind function\n     * @name GraphQL#on\n     * @param {string} type Event type.\n     * @param {Function} handler Event handler.\n     * @see [`reportCacheErrors`]{@link reportCacheErrors} can be used with this to setup error reporting.\n     */\n\n    this.on = on;\n    /**\n     * Removes an event listener.\n     * @kind function\n     * @name GraphQL#off\n     * @param {string} type Event type.\n     * @param {Function} handler Event handler.\n     */\n\n    this.off = off;\n    /**\n     * Emits an event with details to listeners.\n     * @param {string} type Event type.\n     * @param {*} [details] Event details.\n     * @ignore\n     */\n\n    this.emit = emit;\n    /**\n     * Cache of loaded GraphQL operations. You probably don’t need to interact\n     * with this unless you’re implementing a server side rendering framework.\n     * @kind member\n     * @name GraphQL#cache\n     * @type {GraphQLCache}\n     * @example <caption>Export cache as JSON.</caption>\n     * ```js\n     * const exportedCache = JSON.stringify(graphql.cache)\n     * ```\n     * @example <caption>Example cache JSON.</caption>\n     * ```json\n     * {\n     *   \"a1bCd2\": {\n     *      \"data\": {\n     *        \"viewer\": {\n     *          \"name\": \"Jayden Seric\"\n     *        }\n     *      }\n     *   }\n     * }\n     * ```\n     */\n\n    this.cache = cache;\n    /**\n     * A map of loading GraphQL operations. You probably don’t need to interact\n     * with this unless you’re implementing a server side rendering framework.\n     * @kind member\n     * @name GraphQL#operations\n     * @type {object.<GraphQLCacheKey, Promise<GraphQLCacheValue>>}\n     */\n\n    this.operations = {};\n  }\n  /**\n   * Signals that [GraphQL cache]{@link GraphQL#cache} subscribers such as the\n   * [`useGraphQL`]{@link useGraphQL} React hook should reload their GraphQL\n   * operation. Emits a [`GraphQL`]{@link GraphQL} instance `reload` event.\n   * @kind function\n   * @name GraphQL#reload\n   * @param {GraphQLCacheKey} [exceptCacheKey] A [GraphQL cache]{@link GraphQL#cache} [key]{@link GraphQLCacheKey} for cache to exempt from reloading.\n   * @example <caption>Reloading the [GraphQL cache]{@link GraphQL#cache}.</caption>\n   * ```js\n   * graphql.reload()\n   * ```\n   */\n\n\n}","//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `\"*\"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all['*'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\nexport default mitt;\n//# sourceMappingURL=mitt.es.js.map\n","/**\n * A [`GraphQL`]{@link GraphQL} `cache` event handler that reports\n * [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API), HTTP, parse\n * and GraphQL errors via `console.log()`. In a browser environment the grouped\n * error details are expandable.\n * @kind function\n * @name reportCacheErrors\n * @param {object} data [`GraphQL`]{@link GraphQL} `cache` event data.\n * @param {GraphQLCacheKey} data.cacheKey [GraphQL cache]{@link GraphQL#cache} [key]{@link GraphQLCacheKey}.\n * @param {GraphQLCacheKey} data.cacheValue [GraphQL cache]{@link GraphQL#cache} [value]{@link GraphQLCacheValue}.\n * @example <caption>[`GraphQL`]{@link GraphQL} initialized to report cache errors.</caption>\n * ```js\n * import { GraphQL, reportCacheErrors } from 'graphql-react'\n *\n * const graphql = new GraphQL()\n * graphql.on('cache', reportCacheErrors)\n * ```\n */\nexport function reportCacheErrors({\n    cacheKey,\n    cacheValue: { fetchError, httpError, parseError, graphQLErrors }\n  }) {\n    if (fetchError || httpError || parseError || graphQLErrors) {\n      // eslint-disable-next-line no-console\n      console.groupCollapsed(`GraphQL cache errors for key “${cacheKey}”:`)\n  \n      if (fetchError) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('Fetch:')\n  \n        // eslint-disable-next-line no-console\n        console.log(fetchError)\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      if (httpError) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('HTTP:')\n  \n        // eslint-disable-next-line no-console\n        console.log(`Status: ${httpError.status}`)\n  \n        // eslint-disable-next-line no-console\n        console.log(`Text: ${httpError.statusText}`)\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      if (parseError) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('Parse:')\n  \n        // eslint-disable-next-line no-console\n        console.log(parseError)\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      if (graphQLErrors) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('GraphQL:')\n  \n        graphQLErrors.forEach(({ message }) =>\n          // eslint-disable-next-line no-console\n          console.log(message)\n        )\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      // eslint-disable-next-line no-console\n      console.groupEnd()\n    }\n  }"],"names":["self","fetch","url","options","Promise","resolve","reject","request","XMLHttpRequest","keys","all","headers","response","ok","status","statusText","responseURL","text","responseText","json","JSON","parse","blob","Blob","clone","entries","get","n","toLowerCase","has","open","method","onload","getAllResponseHeaders","replace","m","key","value","push","onerror","withCredentials","credentials","i","setRequestHeader","send","body","ReactNativeFile","_ref","uri","name","type","this","graphqlFetchOptions","operation","fetchOptions","Accept","files","extractFiles","path","Map","addFile","paths","file","storedPaths","apply","set","File","prefix","FileList","Array","prototype","map","call","isArray","child","result","forEach","constructor","Object","operationJSON","stringify","size","form","FormData","append","hash","s","h","BASE","l","length","charCodeAt","hashObjectReplacer","originalValue","signature","fields","field","next","done","hashObject","object","fnv1a","toString","_defineProperty","obj","defineProperty","enumerable","configurable","writable","[object Object]","cache","exceptCacheKey","emit","cacheKeys","filter","cacheKey","fetchResponse","fetcher","Error","cacheValue","cacheValuePromise","then","httpError","errors","data","parseError","message","fetchError","operations","fetchOptionsOverride","reloadOnLoad","resetOnLoad","reload","reset","on","off","create","handler","splice","indexOf","evt","slice","graphQLErrors","console","groupCollapsed","log","groupEnd"],"mappings":"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"}